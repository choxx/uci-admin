import { Injectable } from '@angular/core';
/* tslint:disable */
import * as _ from 'lodash';
import * as i0 from "@angular/core";
import * as i1 from "./uci-events.service";
import * as i2 from "@angular/router";
export class TelemetryUtilsService {
    constructor(discussionEvents, router) {
        this.discussionEvents = discussionEvents;
        this.router = router;
        this._context = [];
        this.currentObj = {};
    }
    setContext(context) {
        this._context = context;
        this.currentObj = _.last(context);
    }
    uppendContext(data) {
        const matchedC = _.find(this._context, { id: data.id });
        if (!_.isEmpty(data) && !_.isEqual(data, matchedC)) {
            this._context.push(data);
        }
        this.currentObj = _.last(this._context);
    }
    deleteContext(prevTopic) {
        const topic = _.find(this._context, prevTopic);
        if (topic) {
            this._context = _.reject(this._context, topic);
        }
    }
    getContext() {
        return this._context;
    }
    logImpression(pageId) {
        this.discussionEvents.emitTelemetry({});
        const impressionEvent = {
            eid: 'IMPRESSION',
            edata: {
                type: 'view',
                pageid: pageId,
                uri: this.router.url
            }
        };
        if (this.currentObj) {
            impressionEvent.context = { cdata: [{
                        id: _.get(this.currentObj, 'id').toString(),
                        type: _.get(this.currentObj, 'type')
                    }
                ] };
        }
        this.discussionEvents.emitTelemetry(impressionEvent);
    }
    logInteract(event, pageId) {
        const target = _.get(event, 'currentTarget.attributes.id') || _.get(event, 'target.attributes.id') ||
            _.get(event, 'srcElement.attributes.id');
        const interactEvent = {
            eid: 'INTERACT',
            edata: {
                id: _.get(target, 'value') || _.get(event, 'action'),
                type: 'CLICK',
                pageid: pageId
            }
        };
        if (this.currentObj) {
            const object = {
                id: _.get(this.currentObj, 'id').toString(),
                type: _.get(this.currentObj, 'type'),
                ver: '1'
            };
            object['rollup'] = this._context.length > 1 ? this.getRollUp() : {};
            interactEvent.context = {
                cdata: [{
                        id: _.get(this.currentObj, 'id').toString(),
                        type: _.get(this.currentObj, 'type')
                    }], object
            };
        }
        this.discussionEvents.emitTelemetry(interactEvent);
    }
    getRollUp() {
        const rollUp = {};
        const data = _.reject(this._context, this.currentObj);
        if (this._context.length > 1) {
            data.forEach((element, index) => {
                // console.log('rollup', element);
                rollUp['l' + (index + 1)] = element.toString();
            });
        }
        if (_.get(this.currentObj, 'type') !== 'Post') {
            return rollUp;
        }
        return {};
    }
}
TelemetryUtilsService.ɵfac = function TelemetryUtilsService_Factory(t) { return new (t || TelemetryUtilsService)(i0.ɵɵinject(i1.UciEventsService), i0.ɵɵinject(i2.Router)); };
TelemetryUtilsService.ɵprov = i0.ɵɵdefineInjectable({ token: TelemetryUtilsService, factory: TelemetryUtilsService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TelemetryUtilsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.UciEventsService }, { type: i2.Router }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,